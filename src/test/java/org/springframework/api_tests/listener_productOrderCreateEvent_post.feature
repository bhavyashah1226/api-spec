# ********RoostGPT********

# Test generated by RoostGPT for test ProductOrderingKarate using AI Type Claude AI and AI Model claude-3-opus-20240229
# 
# Feature file generated for /listener/productOrderCreateEvent_post for http method type POST 
# RoostTestHash=10f12a7f6a
# 
# 

# ********RoostGPT********
Feature: Product Order Create Event By Client

  Background:
    * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:4010')
    * url urlBase
    * def authToken = karate.properties['AUTH_TOKEN']
    * configure headers = { 'Authorization': '#(authToken)' }

  Scenario Outline: Product Order Create Event By Client - <description>
    Given path '/listener/productOrderCreateEvent'
    And request
      """
      {
        "notification": {
          "date": "<date>",
          "customer": {
            "subscriberId": "<subscriberId>"
          },
          "order": {
            "id": "<orderId>",
            "correlationOrder": "<correlationOrder>",
            "associatedDocument": "<associatedDocument>",
            "issue": {
              "code": "<issueCode>",
              "description": "<issueDescription>",
              "type": "<issueType>",
              "observation": "<issueObservation>",
              "updateDate": "<issueUpdateDate>",
              "action": "<issueAction>",
              "task": "<issueTask>",
              "fieldActivity": "<issueFieldActivity>",
              "reason": "<issueReason>"
            },
            "type": "<orderType>",
            "code": "<orderCode>",
            "description": "<orderDescription>",
            "lostEquipment": "<lostEquipment>",
            "resource": {
              "gponAccess": "<gponAccess>",
              "devices": {
                "device": [
                  {
                    "category": "<deviceCategory>",
                    "type": "<deviceType>",
                    "description": "<deviceDescription>",
                    "state": "<deviceState>",
                    "usageState": "<deviceUsageState>",
                    "startOperatingDate": "<deviceStartOperatingDate>",
                    "resourceCharacteristic": [
                      {
                        "name": "<resourceCharacteristicName>",
                        "value": "<resourceCharacteristicValue>"
                      }
                    ]
                  }
                ]
              },
              "fiberPath": {
                "items": {
                  "item": [
                    {
                      "name": "<fiberPathItemName>",
                      "value": "<fiberPathItemValue>"
                    }
                  ]
                }
              }
            }
          }
        }
      }
      """
    When method POST
    Then status <expectedStatus>
    And match header Content-Type contains 'application/json'
    And match response == <expectedResponse>

    Examples:
      | read('listener_productOrderCreateEvent_post.csv') |

  Scenario: Missing required fields
    Given path '/listener/productOrderCreateEvent'
    And request
      """
      {
        "notification": {
          "date": "2021-06-05T20:23:29-03:00",
          "customer": {
            "subscriberId": "123456789"
          },
          "order": {
            "id": "20230315000001"
          }
        }
      }
      """
    When method POST
    Then status 400
    And match header Content-Type contains 'application/json'
    And match response == {"error":"Missing required fields"}

  Scenario: Invalid date format
    Given path '/listener/productOrderCreateEvent'
    And request
      """
      {
        "notification": {
          "date": "2021-06-05",
          "customer": {
            "subscriberId": "123456789"
          },
          "order": {
            "id": "20230315000001",
            "correlationOrder": "10",
            "associatedDocument": "VTT001"
          }
        }
      }
      """
    When method POST
    Then status 400
    And match header Content-Type contains 'application/json'
    And match response == {"error":"Invalid date format"}

  Scenario: Unauthorized access
    Given path '/listener/productOrderCreateEvent'
    And request
      """
      {
        "notification": {}
      }
      """
    When method POST
    Then status 401
    And match header Content-Type contains 'application/json'
    And match response == {"error":"Unauthorized"}

  Scenario: Internal server error
    Given path '/listener/productOrderCreateEvent'
    And request
      """
      {
        "notification": {
          "date": "2021-06-05T20:23:29-03:00",
          "customer": {
            "subscriberId": "123456789"
          },
          "order": {
            "id": "20230315000001",
            "correlationOrder": "10",
            "associatedDocument": "VTT001"
          }
        }
      }
      """
    When method POST
    Then status 500
    And match header Content-Type contains 'application/json'
    And match response == {"error":"Internal server error"}

  Scenario: Service unavailable
    Given path '/listener/productOrderCreateEvent'
    And request
      """
      {
        "notification": {
          "date": "2021-06-05T20:23:29-03:00",
          "customer": {
            "subscriberId": "123456789"
          },
          "order": {
            "id": "20230315000001",
            "correlationOrder": "10",
            "associatedDocument": "VTT001"
          }
        }
      }
      """
    When method POST
    Then status 503
    And match header Content-Type contains 'application/json'
    And match response == {"error":"Service unavailable"}

  Scenario: Request timeout
    Given path '/listener/productOrderCreateEvent'
    And request
      """
      {
        "notification": {
          "date": "2021-06-05T20:23:29-03:00",
          "customer": {
            "subscriberId": "123456789"
          },
          "order": {
            "id": "20230315000001",
            "correlationOrder": "10",
            "associatedDocument": "VTT001"
          }
        }
      }
      """
    When method POST
    Then status 504
    And match header Content-Type contains 'application/json'
    And match response == {"error":"Request timeout"}
