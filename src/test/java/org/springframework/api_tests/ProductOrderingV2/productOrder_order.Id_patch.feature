# ********RoostGPT********

# Test generated by RoostGPT for test karateTest-product using AI Type Open AI and AI Model gpt-4
# 
# Feature file generated for /productOrder/{order.Id}_patch for http method type PATCH 
# RoostTestHash=a40197b7fc
# 
# 

# ********RoostGPT********
Feature: Testing Product Order API

Background:
  * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:4010')
  * url urlBase
  * def AUTH_TOKEN = karate.properties['AUTH_TOKEN']
  * configure headers = { Authorization: '#(AUTH_TOKEN)' }

Scenario Outline: Test PATCH /productOrder/{order.Id} endpoint with valid and invalid inputs

  Given path 'productOrder', '<orderId>'
  And request """
  { 
    "order": {
      "correlationOrder": "<correlationOrder>",
      "associatedDocument": "<associatedDocument>",
      "associatedDocumentDate": "<associatedDocumentDate>",
      "type": "<type>",
      "infraType": "<infraType>",
      "orderItem": [],
      "task": {
        "description": "<description>",
        "updateDate": "<updateDate>",
        "action": "<action>"
      }
    }
  }
  """
  When method patch
  Then match status == '<expectedStatus>'
  And match response == '<expectedResponse>'

  Examples:
    | orderId | correlationOrder | associatedDocument | associatedDocumentDate | type | infraType | description | updateDate | action | expectedStatus | expectedResponse |
    | "1234"  | "Test Order"    | "Document1"        | "2021-10-01T10:20:30Z" | "A"  | "B"       | "Task1"     | "2021-10-02T10:20:30Z" | "Action1" | 200 | "Success" |
    | "1234"  | "Test Order"    | "Document1"        | "2021-10-01T10:20:30Z" | "A"  | "B"       | "Task1"     | "2021-10-02T10:20:30Z" | "Action1" | 400 | "Bad Request" |
    | "1234"  | "Test Order"    | "Document1"        | "2021-10-01T10:20:30Z" | "A"  | "B"       | "Task1"     | "2021-10-02T10:20:30Z" | "Action1" | 401 | "Unauthorized" |
    | "1234"  | "Test Order"    | "Document1"        | "2021-10-01T10:20:30Z" | "A"  | "B"       | "Task1"     | "2021-10-02T10:20:30Z" | "Action1" | 403 | "Forbidden" |
    | "1234"  | "Test Order"    | "Document1"        | "2021-10-01T10:20:30Z" | "A"  | "B"       | "Task1"     | "2021-10-02T10:20:30Z" | "Action1" | 404 | "Not Found" |
    | "1234"  | "Test Order"    | "Document1"        | "2021-10-01T10:20:30Z" | "A"  | "B"       | "Task1"     | "2021-10-02T10:20:30Z" | "Action1" | 406 | "Not Acceptable" |
    | "1234"  | "Test Order"    | "Document1"        | "2021-10-01T10:20:30Z" | "A"  | "B"       | "Task1"     | "2021-10-02T10:20:30Z" | "Action1" | 429 | "Too Many Requests" |
    | "1234"  | "Test Order"    | "Document1"        | "2021-10-01T10:20:30Z" | "A"  | "B"       | "Task1"     | "2021-10-02T10:20:30Z" | "Action1" | 500 | "Internal Server Error" |
    | "1234"  | "Test Order"    | "Document1"        | "2021-10-01T10:20:30Z" | "A"  | "B"       | "Task1"     | "2021-10-02T10:20:30Z" | "Action1" | 503 | "Service Unavailable" |
    | "1234"  | "Test Order"    | "Document1"        | "2021-10-01T10:20:30Z" | "A"  | "B"       | "Task1"     | "2021-10-02T10:20:30Z" | "Action1" | 504 | "Gateway Timeout" |
