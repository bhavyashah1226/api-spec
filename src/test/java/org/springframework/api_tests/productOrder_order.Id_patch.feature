# ********RoostGPT********

# Test generated by RoostGPT for test ProductOrderingKarate using AI Type Claude AI and AI Model claude-3-opus-20240229
# 
# Feature file generated for /productOrder/{order.Id}_patch for http method type PATCH 
# RoostTestHash=a40197b7fc
# 
# 

# ********RoostGPT********
Feature: Test /productOrder/{order.Id} endpoint

  Background:
    * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:4010')
    * url urlBase
    * def authToken = karate.properties['AUTH_TOKEN']

  Scenario: Patch product order with valid request
    * def orderId = 'valid_order_id'
    * def requestBody =
      """
      {
        "order": {
          "correlationOrder": "string",
          "associatedDocument": "string",
          "associatedDocumentDate": "2023-06-08T10:30:00Z",
          "type": "string",
          "infraType": "string",
          "orderItem": [],
          "task": {
            "description": "string",
            "updateDate": "2023-06-08T10:30:00Z",
            "action": "string"
          }
        }
      }
      """
    Given path '/productOrder/' + orderId
    And header Authorization = 'Bearer ' + authToken
    And request requestBody
    When method patch
    Then status 200
    And match response ==
      """
      {
        "type": "string",
        "message": "string",
        "code": "string"
      }
      """

  Scenario Outline: Patch product order with invalid requests
    * def orderId = '<orderId>'
    * def requestBody = <requestBody>
    Given path '/productOrder/' + orderId
    And header Authorization = 'Bearer ' + authToken
    And request requestBody
    When method patch
    Then status <status>
    And match response ==
      """
      {
        "type": "string",
        "message": "string",
        "code": "string"
      }
      """

    Examples:
      | read('productOrder_order.Id_patch.csv') |
