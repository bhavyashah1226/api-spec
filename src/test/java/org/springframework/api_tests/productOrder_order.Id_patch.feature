# ********RoostGPT********

# Test generated by RoostGPT for test karateTest-product using AI Type Open AI and AI Model gpt-4
# 
# Feature file generated for /productOrder/{order.Id}_patch for http method type PATCH 
# RoostTestHash=a40197b7fc
# 
# 

# ********RoostGPT********
Feature: Testing Product Order API

Background:
  * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:4010')
  * url urlBase
  * def AUTH_TOKEN = karate.properties['AUTH_TOKEN']
  * configure headers = { Authorization: '#(AUTH_TOKEN)' }

Scenario Outline: Test PATCH /productOrder/{order.Id} endpoint with valid and invalid inputs

  Given path 'productOrder', '<orderId>'
  And request """
    {
      "order": {
        "correlationOrder": "<correlationOrder>",
        "associatedDocument": "<associatedDocument>",
        "associatedDocumentDate": "<associatedDocumentDate>",
        "type": "<type>",
        "infraType": "<infraType>",
        "orderItem": "<orderItem>",
        "task": {
          "description": "<taskDescription>",
          "updateDate": "<taskUpdateDate>",
          "action": "<taskAction>"
        }
      }
    }
  """
  When method patch
  Then status <statusCode>
  And match response == { "type": '#string', "message": '#string', "code": '#string' }

  Examples:
    | orderId | correlationOrder | associatedDocument | associatedDocumentDate | type | infraType | orderItem | taskDescription | taskUpdateDate | taskAction | statusCode |
    | 'validId' | 'validOrder' | 'validDocument' | '2022-01-01T00:00:00Z' | 'validType' | 'validInfraType' | ['item1', 'item2'] | 'validDescription' | '2022-01-01T00:00:00Z' | 'validAction' | 200 |
    | 'invalidId' | 'validOrder' | 'validDocument' | '2022-01-01T00:00:00Z' | 'validType' | 'validInfraType' | ['item1', 'item2'] | 'validDescription' | '2022-01-01T00:00:00Z' | 'validAction' | 404 |
