# ********RoostGPT********

# Test generated by RoostGPT for test karateTest-product using AI Type Open AI and AI Model gpt-4
# 
# Feature file generated for /productOrder/{order.Id}_patch for http method type PATCH 
# RoostTestHash=a40197b7fc
# 
# 

# ********RoostGPT********
Feature: Testing Product Order API

Background:
  * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:4010')
  * url urlBase
  * def AUTH_TOKEN = karate.properties['AUTH_TOKEN']
  * configure headers = { Authorization: '#(AUTH_TOKEN)' }

Scenario Outline: Test PATCH /productOrder/{order.Id} endpoint with valid and invalid inputs
  Given path 'productOrder', '<orderId>'
  And request """
  { 
    "order": {
      "correlationOrder": "<correlationOrder>",
      "associatedDocument": "<associatedDocument>",
      "associatedDocumentDate": "<associatedDocumentDate>",
      "type": "<type>",
      "infraType": "<infraType>",
      "orderItem": [],
      "task": {
        "description": "<description>",
        "updateDate": "<updateDate>",
        "action": "<action>"
      }
    }
  }
  """
  When method patch
  Then match status == '<expectedStatus>'
  And match response == '<expectedResponse>'

Examples:
| orderId | correlationOrder | associatedDocument | associatedDocumentDate | type | infraType | description | updateDate | action | expectedStatus | expectedResponse |
| '123'   | 'COR123'         | 'DOC123'           | '2021-10-01T10:00:00Z' | 'A'  | 'B'       | 'DESC'      | '2021-10-01T10:00:00Z' | 'ACT'  | 200            | 'Success'        |
| '999'   | 'COR999'         | 'DOC999'           | '2021-10-01T10:00:00Z' | 'A'  | 'B'       | 'DESC'      | '2021-10-01T10:00:00Z' | 'ACT'  | 404            | 'Not found'      |
